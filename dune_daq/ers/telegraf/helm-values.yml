---
tplVersion: 2

config:
  agent:
    omit_hostname: true

  inputs:
  - kafka_consumer:
      brokers: {{ dunedaq.kafka.bootstrap_brokers | tojson }}
      topics: {{ ERS_telegraf.kafka_topics | tojson }}
      version: "{{ dunedaq.kafka.version }}"
      client_id: 'ers-telegraf'
      data_format: 'xpath_json'
      consumer_group: 'ers-telegraf'
      xpath:
        - metric_name: "string('ErrorReports')"
          timestamp: '/time'
          timestamp_format: unix_ms
          fields:
            # These are the fields in the ERS messages
            # see erskafka/src/KafkaStream.cpp
            # and the timestamp above
            application_name: "string(/application_name)"
            chain: "string(/chain)"
            cwd: "string(/cwd)"
            file_name: "string(/file_name)"
            function_name: "string(/function_name)"
            host_name: "string(/host_name)"
            issue_name: "string(/issue_name)"
            line_number: "number(/line_number)"
            message: "string(/message)"
            package_name: "string(/package_name)"
            params: "string(/params)"
            partition: "string(/partition)"
            process_id: "number(/process_id)"
            qualifiers: "string(/qualifiers)"
            severity: "string(/severity)"
            thread_id: "number(/thread_id)"
            usecs_since_epoch: "number(/usecs_since_epoch)"
            user_id: "number(/user_id)"
            user_name: "string(/user_name)"
            
  - internal:
      collect_memstats: false
      tags:  
        metrics: "telegraf_internal_only"

  outputs:
  - prometheus_client: # for prometheus
      listen: ":{{ ERS_telegraf.prometheus_port }}"
  - postgresql:
      connection: "{{ ERS_telegraf.postgresql_connection }}"
      create_templates: # these indexes should make dashboards more responsive
{% raw %}
        - 'CREATE TABLE {{ .table }} (id BIGINT GENERATED ALWAYS AS IDENTITY, {{ .columns }})'
        - 'CREATE INDEX IF NOT EXISTS ers_partition_idx ON {{ .table }} USING BTREE (partition)'
        - 'CREATE INDEX IF NOT EXISTS ers_severity_idx ON {{ .table }} USING HASH (severity)'
        - 'CREATE INDEX IF NOT EXISTS ers_time_idx ON {{ .table }} USING BRIN (time)'
{% endraw %}
      tagdrop:
        metrics:
          - "telegraf_internal_only"

affinity:
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions: # try to schedule near Kafka
          - key: "strimzi.io/cluster"
            operator: In
            values:
            - "{{ dunedaq.kafka.name }}"
        namespaceSelector:
          matchLabels:
            name: {{ dunedaq.kafka.namespace }}
        topologyKey: kubernetes.io/hostname
    - weight: 90
      podAffinityTerm:
        labelSelector:
          matchExpressions: # try to schedule near postgresql
          - key: "app.kubernetes.io/instance"
            operator: In
            values:
            - "ers-postgresql"
        namespaceSelector:
          matchLabels:
            name: {{ DUNE_ers.namespace }}
        topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 50m
    memory: 32Mi

nodeSelector:
  kubernetes.io/os: linux

metrics: # do this by hand so we can filter
  health:
    enabled: false
  internal:
    enabled: false
