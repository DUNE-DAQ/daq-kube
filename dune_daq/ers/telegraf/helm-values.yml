---
config:
  agent:
    omit_hostname: true

  inputs:
  - kafka_consumer:
      brokers: {{ dunedaq.kafka.bootstrap_brokers | tojson }}
      topics: {{ ERS_telegraf.kafka_topics | tojson }}
      version: "{{ dunedaq.kafka.version }}"
      client_id: 'ers-telegraf'
      data_format: 'xpath_json'
      consumer_group: 'ers-telegraf'
      xpath:
        - metric_name: "'ErrorReports'"
          timestamp: '/time'
          timestamp_format: unix_ms
          field_selection: '/*'
  - internal:
      collect_memstats: false
      tags:  
        metrics: "telegraf_internal_only"

  outputs:
  - prometheus_client: # for prometheus
      listen: ":{{ ERS_telegraf.prometheus_port }}"
  - postgresql:
      connection: "{{ ERS_telegraf.postgresql_connection }}"
      tagdrop:
        metrics:
          - "telegraf_internal_only"

affinity:
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions: # try to schedule near Kafka
          - key: "strimzi.io/cluster"
            operator: In
            values:
            - "{{ dunedaq.kafka.name }}"
        namespaceSelector:
          matchLabels:
            name: {{ dunedaq.kafka.namespace }}
        topologyKey: kubernetes.io/hostname
    - weight: 90
      podAffinityTerm:
        labelSelector:
          matchExpressions: # try to schedule near postgresql
          - key: "app.kubernetes.io/instance"
            operator: In
            values:
            - "ers-postgresql"
        namespaceSelector:
          matchLabels:
            name: {{ DUNE_ers.namespace }}
        topologyKey: kubernetes.io/hostname

resources:
  requests:
    cpu: 50m
    memory: 32Mi

nodeSelector:
  kubernetes.io/os: linux

metrics: # do this by hand so we can filter
  health:
    enabled: false
  internal:
    enabled: false
