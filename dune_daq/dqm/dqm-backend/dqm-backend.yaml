---
# You must still deploy kafka and redis with their upstream manifests
# and you must create a few secrets:
#
# The ServiceBinding secret from bitnami is a good way to get the redis secret.
#
# A secret called dqm-redis-svcbind with attributes:
# host
# port
#
# A secret called dqm-kafka-svcbind with attributes:
# host
# port
#
# A secret called dqm-backend-django-svcbind with attributes:
# username
# password
# allowed_hosts
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/app: dqm
    app.kubernetes.io/component: dqm-backend
  name: dqmbackend
  namespace: dqm
spec:
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
  selector:
    matchLabels:
      app.kubernetes.io/app: dqm
      app.kubernetes.io/component: dqm-backend
  serviceName: dqm-backend
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/app: dqm
        app.kubernetes.io/component: dqm-backend
    spec:
      containers:
      - name: dqmbackend
        image:  ghcr.io/dune-daq/pocket-dqmdjango:1.1
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PATH_DATABASE # needs to match our volumemounts
          value: /mnt/data/Database
        - name: PATH_DATABASE_RESULTS # needs to match our volumemounts
          value: /mnt/data/Database-results
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              key: host
              name: dqm-redis-svcbind
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              key: port
              name: dqm-redis-svcbind
        - name: KAFKA_HOST
          valueFrom:
            configMapKeyRef:
              key: host
              name: dqm-kafka-svcbind
        - name: KAFKA_PORT
          valueFrom:
            configMapKeyRef:
              key: host
              name: dqm-kafka-svcbind
        - name: DJANGO_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: dqm-backend-django-svcinfo
        - name: DJANGO_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: dqm-backend-django-svcinfo
        - name: ALLOWED_HOSTS
          valueFrom:
            secretKeyRef:
              key: allowed_hosts
              name: dqm-backend-django-svcinfo
        volumeMounts:
        - name: dqm-db-dir
          mountPath: /mnt/data/Database
        - name: dqm-results-dir
          mountPath: /mnt/data/Database-results
        command:
        - sh
        - /web_application.sh
        resources: # these are guess work
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 8Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsGroup: 11000
          runAsNonRoot: true
          runAsUser: 11000
          seccompProfile:
            type: RuntimeDefault
      - name: dqmbackend-consumer
        image:  ghcr.io/dune-daq/pocket-dqmdjango:1.1
        imagePullPolicy: Always
        env:
        - name: PATH_DATABASE
          value: /mnt/data/Database
        - name: PATH_DATABASE_RESULTS
          value: /mnt/data/Database-results
        envFrom:
        - secretRef:
            name: dqm-secrets
        volumeMounts:
        - name: dqm-db-dir
          mountPath: /mnt/data/Database
        - name: dqm-results-dir
          mountPath: /mnt/data/Database-results
        command:
        - sh
        - /consumer.sh
        resources: # these are guess work
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 8Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsGroup: 11000
          runAsNonRoot: true
          runAsUser: 11000
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        fsGroup: 11000
        fsGroupChangePolicy: OnRootMismatch
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: dqm-db-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi # this is a random guess
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: dqm-results-dir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi # this is a random guess
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/app: dqm
    app.kubernetes.io/component: dqm-backend
  name: dqm-backend
  namespace: dqm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8000
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/app: dqm
    app.kubernetes.io/component: dqm-backend
