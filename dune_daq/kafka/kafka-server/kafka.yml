---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ dunedaq.kafka.name }}
  namespace: {{ dunedaq.kafka.namespace }}
spec:
  entityOperator:
    userOperator: {}
    topicOperator: {} # topicOperator not supported on KRaft? - https://github.com/strimzi/proposals/pull/76
  kafkaExporter:
    topicRegex: ".*"
    groupRegex: ".*"
  kafka:
    replicas: {{ DUNE_kafka.replicas }}
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits: # these limits are random guess work
        cpu: 4
        memory: 10Gi
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: WARN
    jvmOptions: # set these to match the requested memory
      -Xms: 1024m
      -Xmx: 8192m
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
        configuration:
          useServiceDnsDomain: true
      - name: tls
        port: 9093
        type: internal
        tls: true
        configuration:
          useServiceDnsDomain: true
    version: {{ dunedaq.kafka.version }}
    config:
      inter.broker.protocol.version: "{{ dunedaq.kafka.protocol_version }}"
      auto.create.topics.enable: false # make each topic by hand so we know what is out there
      log.cleanup.policy: "compact,delete" # ensure last value stays, but cleanup old elements
      log.retention.bytes: 6442450944 # no default upper size limit, set to 6Gi
      default.replication.factor: {{ DUNE_kafka.replicas }}
      offsets.topic.replication.factor: {{ DUNE_kafka.replicas }}
      transaction.state.log.replication.factor: {{ DUNE_kafka.replicas }}
{% if DUNE_kafka.replicas < 3 %}
      # replication only makes sense if there are 3 or more brokers
      transaction.state.log.min.isr: 1
      min.insync.replicas: 1
{% else %}
      # replicate to n/2 for stability at small replica counts
      transaction.state.log.min.isr: {{ (DUNE_kafka.replicas / 2)  | round | int }}
      min.insync.replicas: {{ (DUNE_kafka.replicas / 2) | round | int }}
{% endif %}
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    storage: # no persistance requested
      type: ephemeral
  zookeeper: # this stanza is still required even in KRaft mode
{% if DUNE_kafka.replicas < 3 %}
    replicas: 1
{% else %}
    replicas: 3
{% endif %}
    storage:
      type: ephemeral
