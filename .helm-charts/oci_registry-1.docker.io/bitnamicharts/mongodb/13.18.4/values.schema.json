{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                },
                "namespaceOverride": {
                    "type": "string",
                    "description": "Override the namespace for resource deployed by the chart, but can itself be overridden by the local namespaceOverride",
                    "default": ""
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override mongodb.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override mongodb.fullname template",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Default Kubernetes cluster domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources (sub-charts are not considered). Evaluated as a template",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Common annotations to add to all Mongo resources (sub-charts are not considered). Evaluated as a template",
            "default": {}
        },
        "topologyKey": {
            "type": "string",
            "description": "Override common lib default topology key. If empty - \"kubernetes.io/hostname\" is used",
            "default": ""
        },
        "serviceBindings": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create secret for service binding (Experimental)",
                    "default": false
                }
            }
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "MongoDB(&reg;) image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "MongoDB(&reg;) image registry",
                    "default": "bitnami/mongodb"
                },
                "tag": {
                    "type": "string",
                    "description": "MongoDB(&reg;) image tag (immutable tags are recommended)",
                    "default": "6.0.9-debian-11-r5"
                },
                "digest": {
                    "type": "string",
                    "description": "MongoDB(&reg;) image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "MongoDB(&reg;) image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Set to true if you would like to see extra information on logs",
                    "default": false
                }
            }
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the scheduler (other than default) to dispatch pods",
            "default": ""
        },
        "architecture": {
            "type": "string",
            "description": "MongoDB(&reg;) architecture (`standalone` or `replicaset`)",
            "default": "standalone"
        },
        "useStatefulSet": {
            "type": "boolean",
            "description": "Set to true to use a StatefulSet instead of a Deployment (only when `architecture=standalone`)",
            "default": false
        },
        "auth": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable authentication",
                    "default": true
                },
                "rootUser": {
                    "type": "string",
                    "description": "MongoDB(&reg;) root user",
                    "default": "root"
                },
                "rootPassword": {
                    "type": "string",
                    "description": "MongoDB(&reg;) root password",
                    "default": ""
                },
                "usernames": {
                    "type": "array",
                    "description": "List of custom users to be created during the initialization",
                    "default": [],
                    "items": {}
                },
                "passwords": {
                    "type": "array",
                    "description": "List of passwords for the custom users set at `auth.usernames`",
                    "default": [],
                    "items": {}
                },
                "databases": {
                    "type": "array",
                    "description": "List of custom databases to be created during the initialization",
                    "default": [],
                    "items": {}
                },
                "username": {
                    "type": "string",
                    "description": "DEPRECATED: use `auth.usernames` instead",
                    "default": ""
                },
                "password": {
                    "type": "string",
                    "description": "DEPRECATED: use `auth.passwords` instead",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "DEPRECATED: use `auth.databases` instead",
                    "default": ""
                },
                "replicaSetKey": {
                    "type": "string",
                    "description": "Key used for authentication in the replicaset (only when `architecture=replicaset`)",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret with MongoDB(&reg;) credentials (keys: `mongodb-passwords`, `mongodb-root-password`, `mongodb-metrics-password`, `mongodb-replica-set-key`)",
                    "default": ""
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MongoDB(&reg;) TLS support between nodes in the cluster as well as between mongo clients and nodes",
                    "default": false
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Generate a custom CA and self-signed certificates",
                    "default": true
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret with TLS certificates (keys: `mongodb-ca-cert`, `mongodb-ca-key`)",
                    "default": ""
                },
                "caCert": {
                    "type": "string",
                    "description": "Custom CA certificated (base64 encoded)",
                    "default": ""
                },
                "caKey": {
                    "type": "string",
                    "description": "CA certificate private key (base64 encoded)",
                    "default": ""
                },
                "pemChainIncluded": {
                    "type": "boolean",
                    "description": "Flag to denote that the Certificate Authority (CA) certificates are bundled with the endpoint cert.",
                    "default": false
                },
                "standalone": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Existing secret with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.",
                            "default": ""
                        }
                    }
                },
                "replicaset": {
                    "type": "object",
                    "properties": {
                        "existingSecrets": {
                            "type": "array",
                            "description": "Array of existing secrets with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "hidden": {
                    "type": "object",
                    "properties": {
                        "existingSecrets": {
                            "type": "array",
                            "description": "Array of existing secrets with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "arbiter": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Existing secret with TLS certificates (`tls.key`, `tls.crt`, `ca.crt`) or (`tls.key`, `tls.crt`) with tls.pemChainIncluded set as enabled.",
                            "default": ""
                        }
                    }
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container TLS certs setup image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container TLS certs setup image repository",
                            "default": "bitnami/nginx"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container TLS certs setup image tag (immutable tags are recommended)",
                            "default": "1.25.2-debian-11-r11"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container TLS certs setup image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container TLS certs setup image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container TLS certs specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraDnsNames": {
                    "type": "array",
                    "description": "Add extra dns names to the CA, can solve x509 auth issue for pod clients",
                    "default": [],
                    "items": {}
                },
                "mode": {
                    "type": "string",
                    "description": "Allows to set the tls mode which should be used when tls is enabled (options: `allowTLS`, `preferTLS`, `requireTLS`)",
                    "default": "requireTLS"
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "Init container generate-tls-certs resource limits",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Init container generate-tls-certs resource requests",
                            "default": {}
                        }
                    }
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Add deployment host aliases",
            "default": [],
            "items": {}
        },
        "replicaSetName": {
            "type": "string",
            "description": "Name of the replica set (only when `architecture=replicaset`)",
            "default": "rs0"
        },
        "replicaSetHostnames": {
            "type": "boolean",
            "description": "Enable DNS hostnames in the replicaset config (only when `architecture=replicaset`)",
            "default": true
        },
        "enableIPv6": {
            "type": "boolean",
            "description": "Switch to enable/disable IPv6 on MongoDB(&reg;)",
            "default": false
        },
        "directoryPerDB": {
            "type": "boolean",
            "description": "Switch to enable/disable DirectoryPerDB on MongoDB(&reg;)",
            "default": false
        },
        "systemLogVerbosity": {
            "type": "number",
            "description": "MongoDB(&reg;) system log verbosity level",
            "default": 0
        },
        "disableSystemLog": {
            "type": "boolean",
            "description": "Switch to enable/disable MongoDB(&reg;) system log",
            "default": false
        },
        "disableJavascript": {
            "type": "boolean",
            "description": "Switch to enable/disable MongoDB(&reg;) server-side JavaScript execution",
            "default": false
        },
        "enableJournal": {
            "type": "boolean",
            "description": "Switch to enable/disable MongoDB(&reg;) Journaling",
            "default": true
        },
        "configuration": {
            "type": "string",
            "description": "MongoDB(&reg;) configuration file to be used for Primary and Secondary nodes",
            "default": ""
        },
        "replicaSetConfigurationSettings": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MongoDB(&reg;) Switch to enable/disable configuring MongoDB(&reg;) run time rs.conf settings",
                    "default": false
                },
                "configuration": {
                    "type": "object",
                    "description": "run-time rs.conf settings",
                    "default": {}
                }
            }
        },
        "existingConfigmap": {
            "type": "string",
            "description": "Name of existing ConfigMap with MongoDB(&reg;) configuration for Primary and Secondary nodes",
            "default": ""
        },
        "initdbScripts": {
            "type": "object",
            "description": "Dictionary of initdb scripts",
            "default": {}
        },
        "initdbScriptsConfigMap": {
            "type": "string",
            "description": "Existing ConfigMap with custom initdb scripts",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "extraFlags": {
            "type": "array",
            "description": "MongoDB(&reg;) additional command line flags",
            "default": [],
            "items": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to add to MongoDB(&reg;) pods",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars (in case of sensitive data)",
            "default": ""
        },
        "annotations": {
            "type": "object",
            "description": "Additional labels to be added to the MongoDB(&reg;) statefulset. Evaluated as a template",
            "default": {}
        },
        "labels": {
            "type": "object",
            "description": "Annotations to be added to the MongoDB(&reg;) statefulset. Evaluated as a template",
            "default": {}
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of MongoDB(&reg;) nodes (only when `architecture=replicaset`)",
            "default": 2
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Strategy to use to replace existing MongoDB(&reg;) pods. When architecture=standalone and useStatefulSet=false,",
                    "default": "RollingUpdate"
                }
            }
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "Pod management policy for MongoDB(&reg;)",
            "default": "OrderedReady"
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "MongoDB(&reg;) Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "MongoDB(&reg;) Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "MongoDB(&reg;) Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "MongoDB(&reg;) Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "MongoDB(&reg;) Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "MongoDB(&reg;) Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "MongoDB(&reg;) Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "MongoDB(&reg;) Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "MongoDB(&reg;) Spread Constraints for Pods",
            "default": [],
            "items": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "LifecycleHook for the MongoDB(&reg;) container(s) to automate configuration before or after startup",
            "default": {}
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "MongoDB(&reg;) Termination Grace Period",
            "default": ""
        },
        "podLabels": {
            "type": "object",
            "description": "MongoDB(&reg;) pod labels",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "MongoDB(&reg;) Pod annotations",
            "default": {}
        },
        "priorityClassName": {
            "type": "string",
            "description": "Name of the existing priority class to be used by MongoDB(&reg;) pod(s)",
            "default": ""
        },
        "runtimeClassName": {
            "type": "string",
            "description": "Name of the runtime class to be used by MongoDB(&reg;) pod(s)",
            "default": ""
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MongoDB(&reg;) pod(s)' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Group ID for the volumes of the MongoDB(&reg;) pod(s)",
                    "default": 1001
                },
                "sysctls": {
                    "type": "array",
                    "description": "sysctl settings of the MongoDB(&reg;) pod(s)'",
                    "default": [],
                    "items": {}
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MongoDB(&reg;) container(s)' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the MongoDB(&reg;) container",
                    "default": 1001
                },
                "runAsGroup": {
                    "type": "number",
                    "description": "Group ID for the MongoDB(&reg;) container",
                    "default": 0
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set MongoDB(&reg;) container's Security Context runAsNonRoot",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Is it possible to escalate MongoDB(&reg;) pod(s) privileges",
                    "default": false
                },
                "seccompProfile": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set MongoDB(&reg;) container's Security Context seccompProfile type",
                            "default": "RuntimeDefault"
                        }
                    }
                },
                "capabilities": {
                    "type": "object",
                    "properties": {
                        "drop": {
                            "type": "array",
                            "description": "Set MongoDB(&reg;) container's Security Context capabilities to drop",
                            "default": [
                                "ALL"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for MongoDB(&reg;) containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for MongoDB(&reg;) containers",
                    "default": {}
                }
            }
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "mongodb": {
                    "type": "number",
                    "description": "MongoDB(&reg;) container port",
                    "default": 27017
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 20
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 10
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 20
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 10
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 30
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Override default liveness probe for MongoDB(&reg;) containers",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Override default readiness probe for MongoDB(&reg;) containers",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Override default startup probe for MongoDB(&reg;) containers",
            "default": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers for the hidden node pod(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers for the MongoDB(&reg;) pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the MongoDB(&reg;) container(s)",
            "default": [],
            "items": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes to the MongoDB(&reg;) statefulset",
            "default": [],
            "items": {}
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable/disable a Pod Disruption Budget creation for MongoDB(&reg;) pod(s)",
                    "default": false
                },
                "minAvailable": {
                    "type": "number",
                    "description": "Minimum number/percentage of MongoDB(&reg;) pods that must still be available after the eviction",
                    "default": 1
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Maximum number/percentage of MongoDB(&reg;) pods that may be made unavailable after the eviction",
                    "default": ""
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "nameOverride": {
                    "type": "string",
                    "description": "MongoDB(&reg;) service name",
                    "default": ""
                },
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type (only for standalone architecture)",
                    "default": "ClusterIP"
                },
                "portName": {
                    "type": "string",
                    "description": "MongoDB(&reg;) service port name (only for standalone architecture)",
                    "default": "mongodb"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "mongodb": {
                            "type": "number",
                            "description": "MongoDB(&reg;) service port.",
                            "default": 27017
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "mongodb": {
                            "type": "string",
                            "description": "Port to bind to for NodePort and LoadBalancer service types (only for standalone architecture)",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "MongoDB(&reg;) service cluster IP (only for standalone architecture)",
                    "default": ""
                },
                "externalIPs": {
                    "type": "array",
                    "description": "Specify the externalIP value ClusterIP service type (only for standalone architecture)",
                    "default": [],
                    "items": {}
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP for MongoDB(&reg;) Service (only for standalone architecture)",
                    "default": ""
                },
                "loadBalancerClass": {
                    "type": "string",
                    "description": "loadBalancerClass for MongoDB(&reg;) Service (only for standalone architecture)",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Address(es) that are allowed when service is LoadBalancer (only for standalone architecture)",
                    "default": [],
                    "items": {}
                },
                "allocateLoadBalancerNodePorts": {
                    "type": "boolean",
                    "description": "Wheter to allocate node ports when service type is LoadBalancer",
                    "default": true
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Provide any additional annotations that may be required",
                    "default": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "service external traffic policy (only for standalone architecture)",
                    "default": "Local"
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "externalAccess": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Kubernetes external cluster access to MongoDB(&reg;) nodes (only for replicaset architecture)",
                    "default": false
                },
                "autoDiscovery": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable using an init container to auto-detect external IPs by querying the K8s API",
                            "default": false
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image repository",
                                    "default": "bitnami/kubectl"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image tag (immutable tags are recommended)",
                                    "default": "1.25.13-debian-11-r5"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Init container auto-discovery image pull secrets",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "Init container auto-discovery resource limits",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "Init container auto-discovery resource requests",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "externalMaster": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Use external master for bootstrapping",
                            "default": false
                        },
                        "host": {
                            "type": "string",
                            "description": "External master host to bootstrap from",
                            "default": ""
                        },
                        "port": {
                            "type": "number",
                            "description": "Port for MongoDB(&reg;) service external master host",
                            "default": 27017
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes Service type for external access. Allowed values: NodePort, LoadBalancer or ClusterIP",
                            "default": "LoadBalancer"
                        },
                        "portName": {
                            "type": "string",
                            "description": "MongoDB(&reg;) port name used for external access when service type is LoadBalancer",
                            "default": "mongodb"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "mongodb": {
                                    "type": "number",
                                    "description": "MongoDB(&reg;) port used for external access when service type is LoadBalancer",
                                    "default": 27017
                                }
                            }
                        },
                        "loadBalancerIPs": {
                            "type": "array",
                            "description": "Array of load balancer IPs for MongoDB(&reg;) nodes",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerClass": {
                            "type": "string",
                            "description": "loadBalancerClass when service type is LoadBalancer",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address(es) that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "allocateLoadBalancerNodePorts": {
                            "type": "boolean",
                            "description": "Wheter to allocate node ports when service type is LoadBalancer",
                            "default": true
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "MongoDB(&reg;) service external traffic policy",
                            "default": "Local"
                        },
                        "nodePorts": {
                            "type": "array",
                            "description": "Array of node ports used to configure MongoDB(&reg;) advertised hostname when service type is NodePort",
                            "default": [],
                            "items": {}
                        },
                        "domain": {
                            "type": "string",
                            "description": "Domain or external IP used to configure MongoDB(&reg;) advertised hostname when service type is NodePort",
                            "default": ""
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Service annotations for external access",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Control where client requests go, to the same pod or round-robin",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "hidden": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kubernetes external cluster access to MongoDB(&reg;) hidden nodes",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Kubernetes Service type for external access. Allowed values: NodePort or LoadBalancer",
                                    "default": "LoadBalancer"
                                },
                                "portName": {
                                    "type": "string",
                                    "description": "MongoDB(&reg;) port name used for external access when service type is LoadBalancer",
                                    "default": "mongodb"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "mongodb": {
                                            "type": "number",
                                            "description": "MongoDB(&reg;) port used for external access when service type is LoadBalancer",
                                            "default": 27017
                                        }
                                    }
                                },
                                "loadBalancerIPs": {
                                    "type": "array",
                                    "description": "Array of load balancer IPs for MongoDB(&reg;) nodes",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerClass": {
                                    "type": "string",
                                    "description": "loadBalancerClass when service type is LoadBalancer",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Address(es) that are allowed when service is LoadBalancer",
                                    "default": [],
                                    "items": {}
                                },
                                "allocateLoadBalancerNodePorts": {
                                    "type": "boolean",
                                    "description": "Wheter to allocate node ports when service type is LoadBalancer",
                                    "default": true
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "MongoDB(&reg;) service external traffic policy",
                                    "default": "Local"
                                },
                                "nodePorts": {
                                    "type": "array",
                                    "description": "Array of node ports used to configure MongoDB(&reg;) advertised hostname when service type is NodePort. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "Domain or external IP used to configure MongoDB(&reg;) advertised hostname when service type is NodePort",
                                    "default": ""
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Service annotations for external access",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MongoDB(&reg;) data persistence using PVC",
                    "default": true
                },
                "medium": {
                    "type": "string",
                    "description": "Provide a medium for `emptyDir` volumes.",
                    "default": ""
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Provide an existing `PersistentVolumeClaim` (only when `architecture=standalone`)",
                    "default": ""
                },
                "resourcePolicy": {
                    "type": "string",
                    "description": "Setting it to \"keep\" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "PVC Storage Class for MongoDB(&reg;) data volume",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "PV Access Mode",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "PVC Storage Request for MongoDB(&reg;) data volume",
                    "default": "8Gi"
                },
                "annotations": {
                    "type": "object",
                    "description": "PVC annotations",
                    "default": {}
                },
                "mountPath": {
                    "type": "string",
                    "description": "Path to mount the volume at",
                    "default": "/bitnami/mongodb"
                },
                "subPath": {
                    "type": "string",
                    "description": "Subdirectory of the volume to mount at",
                    "default": ""
                },
                "volumeClaimTemplates": {
                    "type": "object",
                    "properties": {
                        "selector": {
                            "type": "object",
                            "description": "A label query over volumes to consider for binding (e.g. when using local volumes)",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Custom PVC requests attributes",
                            "default": {}
                        },
                        "dataSource": {
                            "type": "object",
                            "description": "Add dataSource to the VolumeClaimTemplate",
                            "default": {}
                        }
                    }
                }
            }
        },
        "backup": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the logical dump of the database \"regularly\"",
                    "default": false
                },
                "cronjob": {
                    "type": "object",
                    "properties": {
                        "schedule": {
                            "type": "string",
                            "description": "Set the cronjob parameter schedule",
                            "default": "@daily"
                        },
                        "concurrencyPolicy": {
                            "type": "string",
                            "description": "Set the cronjob parameter concurrencyPolicy",
                            "default": "Allow"
                        },
                        "failedJobsHistoryLimit": {
                            "type": "number",
                            "description": "Set the cronjob parameter failedJobsHistoryLimit",
                            "default": 1
                        },
                        "successfulJobsHistoryLimit": {
                            "type": "number",
                            "description": "Set the cronjob parameter successfulJobsHistoryLimit",
                            "default": 3
                        },
                        "startingDeadlineSeconds": {
                            "type": "string",
                            "description": "Set the cronjob parameter startingDeadlineSeconds",
                            "default": ""
                        },
                        "ttlSecondsAfterFinished": {
                            "type": "string",
                            "description": "Set the cronjob parameter ttlSecondsAfterFinished",
                            "default": ""
                        },
                        "restartPolicy": {
                            "type": "string",
                            "description": "Set the cronjob parameter restartPolicy",
                            "default": "OnFailure"
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "runAsUser": {
                                    "type": "number",
                                    "description": "User ID for the backup container",
                                    "default": 1001
                                },
                                "runAsGroup": {
                                    "type": "number",
                                    "description": "Group ID for the backup container",
                                    "default": 0
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set backup container's Security Context runAsNonRoot",
                                    "default": true
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "Is the container itself readonly",
                                    "default": true
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "Is it possible to escalate backup pod(s) privileges",
                                    "default": false
                                },
                                "seccompProfile": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Set backup container's Security Context seccompProfile type",
                                            "default": "RuntimeDefault"
                                        }
                                    }
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Set backup container's Security Context capabilities to drop",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "command": {
                            "type": "array",
                            "description": "Set backup container's command to run",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Set the cronjob labels",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Set the cronjob annotations",
                            "default": {}
                        },
                        "storage": {
                            "type": "object",
                            "properties": {
                                "existingClaim": {
                                    "type": "string",
                                    "description": "Provide an existing `PersistentVolumeClaim` (only when `architecture=standalone`)",
                                    "default": ""
                                },
                                "resourcePolicy": {
                                    "type": "string",
                                    "description": "Setting it to \"keep\" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted",
                                    "default": ""
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "PVC Storage Class for the backup data volume",
                                    "default": ""
                                },
                                "accessModes": {
                                    "type": "array",
                                    "description": "PV Access Mode",
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "size": {
                                    "type": "string",
                                    "description": "PVC Storage Request for the backup data volume",
                                    "default": "8Gi"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "PVC annotations",
                                    "default": {}
                                },
                                "mountPath": {
                                    "type": "string",
                                    "description": "Path to mount the volume at ",
                                    "default": "/backup/mongodb"
                                },
                                "subPath": {
                                    "type": "string",
                                    "description": "Subdirectory of the volume to mount at",
                                    "default": ""
                                },
                                "volumeClaimTemplates": {
                                    "type": "object",
                                    "properties": {
                                        "selector": {
                                            "type": "object",
                                            "description": "A label query over volumes to consider for binding (e.g. when using local volumes)",
                                            "default": {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable creation of ServiceAccount for MongoDB(&reg;) pods",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the created serviceAccount",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional Service Account annotations",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                    "default": true
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create & use RBAC resources or not",
                    "default": false
                },
                "rules": {
                    "type": "array",
                    "description": "Custom rules to create following the role specification",
                    "default": [],
                    "items": {}
                }
            }
        },
        "podSecurityPolicy": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": false
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Enable privilege escalation",
                    "default": false
                },
                "privileged": {
                    "type": "boolean",
                    "description": "Allow privileged",
                    "default": false
                },
                "spec": {
                    "type": "object",
                    "description": "Specify the full spec to use for Pod Security Policy",
                    "default": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r51"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "Init container volume-permissions resource limits",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Init container volume-permissions resource requests",
                            "default": {}
                        }
                    }
                },
                "securityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the volumePermissions container",
                            "default": 0
                        }
                    }
                }
            }
        },
        "arbiter": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable deploying the arbiter",
                    "default": true
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "configuration": {
                    "type": "string",
                    "description": "Arbiter configuration file to be used",
                    "default": ""
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "Name of existing ConfigMap with Arbiter configuration",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraFlags": {
                    "type": "array",
                    "description": "Arbiter additional command line flags",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to add to Arbiter pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars (in case of sensitive data)",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional labels to be added to the Arbiter statefulset",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Annotations to be added to the Arbiter statefulset",
                    "default": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "MongoDB(&reg;) Spread Constraints for arbiter Pods",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Arbiter container to automate configuration before or after startup",
                    "default": {}
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Arbiter Termination Grace Period",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Strategy that will be employed to update Pods in the StatefulSet",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "Pod management policy for MongoDB(&reg;)",
                    "default": "OrderedReady"
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the scheduler (other than default) to dispatch pods",
                    "default": ""
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Arbiter Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Arbiter Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Arbiter Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Arbiter Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Arbiter Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Arbiter Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Arbiter Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Arbiter Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Arbiter pod labels",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Arbiter Pod annotations",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Name of the existing priority class to be used by Arbiter pod(s)",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by Arbiter pod(s)",
                    "default": ""
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Arbiter pod(s)' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the volumes of the Arbiter pod(s)",
                            "default": 1001
                        },
                        "sysctls": {
                            "type": "array",
                            "description": "sysctl settings of the Arbiter pod(s)'",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Arbiter container(s)' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Arbiter container",
                            "default": 1001
                        },
                        "runAsGroup": {
                            "type": "number",
                            "description": "Group ID for the Arbiter container",
                            "default": 0
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Arbiter containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Is it possible to escalate Arbiter pod(s) privileges",
                            "default": false
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Arbiter container's Security Context seccompProfile type",
                                    "default": "RuntimeDefault"
                                }
                            }
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Arbiter container's Security Context capabilities to drop",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for Arbiter containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for Arbiter containers",
                            "default": {}
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "mongodb": {
                            "type": "number",
                            "description": "MongoDB(&reg;) arbiter container port",
                            "default": 27017
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe for Arbiter containers",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe for Arbiter containers",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe for Arbiter containers",
                    "default": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers for the Arbiter pod(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers for the Arbiter pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Arbiter container(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes to the Arbiter statefulset",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation for Arbiter pod(s)",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of Arbiter pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of Arbiter pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "nameOverride": {
                            "type": "string",
                            "description": "The arbiter service name",
                            "default": ""
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "mongodb": {
                                    "type": "number",
                                    "description": "MongoDB(&reg;) service port",
                                    "default": 27017
                                }
                            }
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Provide any additional annotations that may be required",
                            "default": {}
                        },
                        "headless": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the headless service.",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "hidden": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable deploying the hidden nodes",
                    "default": false
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "configuration": {
                    "type": "string",
                    "description": "Hidden node configuration file to be used",
                    "default": ""
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "Name of existing ConfigMap with Hidden node configuration",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraFlags": {
                    "type": "array",
                    "description": "Hidden node additional command line flags",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to add to Hidden node pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars (in case of sensitive data)",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional labels to be added to thehidden node statefulset",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Annotations to be added to the hidden node statefulset",
                    "default": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "MongoDB(&reg;) Spread Constraints for hidden Pods",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Hidden container to automate configuration before or after startup",
                    "default": {}
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of hidden nodes (only when `architecture=replicaset`)",
                    "default": 1
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Hidden Termination Grace Period",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Strategy that will be employed to update Pods in the StatefulSet",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "Pod management policy for hidden node",
                    "default": "OrderedReady"
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the scheduler (other than default) to dispatch pods",
                    "default": ""
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Hidden node Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Hidden node Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Hidden Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Hidden Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Hidden Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Hidden node Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Hidden node Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Hidden node Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Hidden node pod labels",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Hidden node Pod annotations",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Name of the existing priority class to be used by hidden node pod(s)",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by hidden node pod(s)",
                    "default": ""
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Hidden pod(s)' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the volumes of the Hidden pod(s)",
                            "default": 1001
                        },
                        "sysctls": {
                            "type": "array",
                            "description": "sysctl settings of the Hidden pod(s)'",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Hidden container(s)' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Hidden container",
                            "default": 1001
                        },
                        "runAsGroup": {
                            "type": "number",
                            "description": "Group ID for the Hidden container",
                            "default": 0
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Hidden containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Hidden containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Hidden container's Security Context seccompProfile type",
                                    "default": "RuntimeDefault"
                                }
                            }
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Hidden container's Security Context capabilities to drop",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for hidden node containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for hidden node containers",
                            "default": {}
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "mongodb": {
                            "type": "number",
                            "description": "MongoDB(&reg;) hidden container port",
                            "default": 27017
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe for hidden node containers",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe for hidden node containers",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe for MongoDB(&reg;) containers",
                    "default": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add init containers to the MongoDB(&reg;) Hidden pods.",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers for the hidden node pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the hidden node container(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes to the hidden node statefulset",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation for hidden node pod(s)",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of hidden node pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of hidden node pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable hidden node data persistence using PVC",
                            "default": true
                        },
                        "medium": {
                            "type": "string",
                            "description": "Provide a medium for `emptyDir` volumes.",
                            "default": ""
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "PVC Storage Class for hidden node data volume",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "PV Access Mode",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for hidden node data volume",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "PVC annotations",
                            "default": {}
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "The path the volume will be mounted at, useful when using different MongoDB(&reg;) images.",
                            "default": "/bitnami/mongodb"
                        },
                        "subPath": {
                            "type": "string",
                            "description": "The subdirectory of the volume to mount to, useful in dev environments",
                            "default": ""
                        },
                        "volumeClaimTemplates": {
                            "type": "object",
                            "properties": {
                                "selector": {
                                    "type": "object",
                                    "description": "A label query over volumes to consider for binding (e.g. when using local volumes)",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "Custom PVC requests attributes",
                                    "default": {}
                                },
                                "dataSource": {
                                    "type": "object",
                                    "description": "Set volumeClaimTemplate dataSource",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "portName": {
                            "type": "string",
                            "description": "MongoDB(&reg;) service port name",
                            "default": "mongodb"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "mongodb": {
                                    "type": "number",
                                    "description": "MongoDB(&reg;) service port",
                                    "default": 27017
                                }
                            }
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Provide any additional annotations that may be required",
                            "default": {}
                        },
                        "headless": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the headless service.",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable using a sidecar Prometheus exporter",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "MongoDB(&reg;) Prometheus exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "MongoDB(&reg;) Prometheus exporter image repository",
                            "default": "bitnami/mongodb-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "MongoDB(&reg;) Prometheus exporter image tag (immutable tags are recommended)",
                            "default": "0.39.0-debian-11-r85"
                        },
                        "digest": {
                            "type": "string",
                            "description": "MongoDB(&reg;) image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "MongoDB(&reg;) Prometheus exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "String with username for the metrics exporter",
                    "default": ""
                },
                "password": {
                    "type": "string",
                    "description": "String with password for the metrics exporter",
                    "default": ""
                },
                "compatibleMode": {
                    "type": "boolean",
                    "description": "Enables old style mongodb-exporter metrics",
                    "default": true
                },
                "collector": {
                    "type": "object",
                    "properties": {
                        "all": {
                            "type": "boolean",
                            "description": "Enable all collectors. Same as enabling all individual metrics",
                            "default": false
                        },
                        "diagnosticdata": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from getDiagnosticData",
                            "default": true
                        },
                        "replicasetstatus": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from replSetGetStatus",
                            "default": true
                        },
                        "dbstats": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from dbStats",
                            "default": false
                        },
                        "topmetrics": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from top admin command",
                            "default": false
                        },
                        "indexstats": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from $indexStats",
                            "default": false
                        },
                        "collstats": {
                            "type": "boolean",
                            "description": "Boolean Enable collecting metrics from $collStats",
                            "default": false
                        },
                        "collstatsColls": {
                            "type": "array",
                            "description": "List of \\<databases\\>.\\<collections\\> to get $collStats",
                            "default": [],
                            "items": {}
                        },
                        "indexstatsColls": {
                            "type": "array",
                            "description": "List - List of \\<databases\\>.\\<collections\\> to get $indexStats",
                            "default": [],
                            "items": {}
                        },
                        "collstatsLimit": {
                            "type": "number",
                            "description": "Number - Disable collstats, dbstats, topmetrics and indexstats collector if there are more than \\<n\\> collections. 0=No limit",
                            "default": 0
                        }
                    }
                },
                "extraFlags": {
                    "type": "string",
                    "description": "String with extra flags to the metrics exporter",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for Prometheus exporter containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for Prometheus exporter containers",
                            "default": {}
                        }
                    }
                },
                "containerPort": {
                    "type": "number",
                    "description": "Port of the Prometheus metrics container",
                    "default": 9216
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.ports.metrics }}"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of the Prometheus metrics service",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Port of the Prometheus metrics service",
                                    "default": 9216
                                }
                            }
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 15
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 10
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe for MongoDB(&reg;) containers",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe for MongoDB(&reg;) containers",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe for MongoDB(&reg;) containers",
                    "default": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the metrics container(s)",
                    "default": [],
                    "items": {}
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor Resource for scraping metrics using Prometheus Operator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace which Prometheus is running in",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": "30s"
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Specify the timeout after which the scrape is ended",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping.",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricsRelabelConfigs to apply to samples before ingestion.",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Used to pass Labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Set this to true to create prometheusRules for Prometheus operator",
                            "default": false
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus",
                            "default": {}
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace where prometheusRules resource should be created",
                            "default": ""
                        },
                        "rules": {
                            "type": "array",
                            "description": "Rules to be created, check values for an example",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        }
    }
}